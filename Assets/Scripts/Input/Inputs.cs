//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""IsometricInput"",
            ""id"": ""df222970-edfb-4d4a-9460-3fdfe358647b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""10e255ad-a3b5-4ae3-a2df-a835c2cd4c49"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Value"",
                    ""id"": ""ca92c419-affd-4e2b-bf37-57f897926394"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookAt"",
                    ""type"": ""Value"",
                    ""id"": ""0b9a48f9-6033-49eb-af85-df9f0cd83f7c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""1b2d04a4-e083-4e76-907c-12c8ac8839bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Value"",
                    ""id"": ""8a64b36a-e457-46fa-881c-77848ddb9dce"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Value"",
                    ""id"": ""def77380-53a3-44b4-a643-12980ae3c52f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenGameMenu"",
                    ""type"": ""Value"",
                    ""id"": ""9908644d-274e-4847-a630-20636f4d0273"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0c3c4a2e-6d67-478c-89b3-16106a53c93c"",
                    ""path"": ""1DAxis(minValue=-0.5)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e7fe01ed-0438-488e-bab8-764200941d13"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""491d3bbd-57db-43d4-bc46-589eed8389b9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5786308b-28a7-4613-9694-bd7515845d12"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""849d9582-e307-4b58-bfe8-947cde6bb4f3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6632486d-84c5-4f8a-8079-1cd64062e93f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7aa93f37-d816-4e1d-864c-1bb4a0beb5e9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c41e6af9-f785-4987-884f-eb81dc849900"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""b46fee00-b99b-4af0-b08d-a8ac9060fa61"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""a82ce684-6804-45ec-8e32-a1f4917a0d1d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d3cac402-5ab1-4527-b0c4-bfe0354d61ff"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenGameMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FirstPersonInput"",
            ""id"": ""68cf310e-5714-4010-8b95-e5e387ac0954"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""5e317b3d-9f2b-458b-8961-eef5013e1959"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookAt"",
                    ""type"": ""Value"",
                    ""id"": ""f4b0b72a-e2bf-4526-b896-11873e026c3d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""35b369e4-4724-4838-aec4-e6630f2cc398"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenGameMenu"",
                    ""type"": ""Value"",
                    ""id"": ""c48d1ad9-7ddc-41d3-8eff-6033a1e09478"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f87bc21-beb7-4cd6-9824-81ecc890a19a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""659df79c-927f-496e-a74c-793f6c494c85"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3ab5786-f1c8-4de6-91b6-3d1c425a40db"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c5817e5-ab22-40d7-a99c-af7f0ed7c130"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenGameMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ReloadInput"",
            ""id"": ""a45aa758-cfc1-47e8-a0a3-9ec0646860e9"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Value"",
                    ""id"": ""dd408396-1c28-4243-92de-082eda9f77a7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveHand"",
                    ""type"": ""Value"",
                    ""id"": ""f0848c3b-4962-4664-b70e-d5eca9b880d7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ExitReload"",
                    ""type"": ""Value"",
                    ""id"": ""985b53ab-8f1f-418f-871b-84f4514c935c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenGameMenu"",
                    ""type"": ""Value"",
                    ""id"": ""52494202-23f0-4fd0-aaf0-c31de81dd011"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58d19db6-6c59-469c-b080-0b185bcffe28"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd29cdb6-0a31-43fb-8164-9ff850d8a832"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitReload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7f68df6-6585-4165-8971-2bf7cbedbaa2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitReload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbc545fe-1526-4868-b466-f881b334837d"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": """",
                    ""action"": ""MoveHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5b62730-9638-4ae3-baa7-07b7dd4a0409"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenGameMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InteractionInput"",
            ""id"": ""79546eca-aef7-4cb1-8636-07fc1ae2805a"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Value"",
                    ""id"": ""fa58d3f7-7d8f-4492-98dc-f6d4647f8831"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1bc53e5a-3c87-4257-a258-bce257f1cad9"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76bc6b7d-2ab0-4c11-ad18-2abaa35ff96b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3240aa76-c89d-4b53-812c-cbffa6a10dc0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameMenuInput"",
            ""id"": ""c6717eed-268f-4b6f-98c7-f8fee5c48b83"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Value"",
                    ""id"": ""75411783-4865-4fe8-ab50-9b2a79f833cc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3d882bcf-4d92-48f6-81e3-917ef3146cab"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // IsometricInput
        m_IsometricInput = asset.FindActionMap("IsometricInput", throwIfNotFound: true);
        m_IsometricInput_Move = m_IsometricInput.FindAction("Move", throwIfNotFound: true);
        m_IsometricInput_Reload = m_IsometricInput.FindAction("Reload", throwIfNotFound: true);
        m_IsometricInput_LookAt = m_IsometricInput.FindAction("LookAt", throwIfNotFound: true);
        m_IsometricInput_Rotation = m_IsometricInput.FindAction("Rotation", throwIfNotFound: true);
        m_IsometricInput_Run = m_IsometricInput.FindAction("Run", throwIfNotFound: true);
        m_IsometricInput_Interact = m_IsometricInput.FindAction("Interact", throwIfNotFound: true);
        m_IsometricInput_OpenGameMenu = m_IsometricInput.FindAction("OpenGameMenu", throwIfNotFound: true);
        // FirstPersonInput
        m_FirstPersonInput = asset.FindActionMap("FirstPersonInput", throwIfNotFound: true);
        m_FirstPersonInput_Fire = m_FirstPersonInput.FindAction("Fire", throwIfNotFound: true);
        m_FirstPersonInput_LookAt = m_FirstPersonInput.FindAction("LookAt", throwIfNotFound: true);
        m_FirstPersonInput_Look = m_FirstPersonInput.FindAction("Look", throwIfNotFound: true);
        m_FirstPersonInput_OpenGameMenu = m_FirstPersonInput.FindAction("OpenGameMenu", throwIfNotFound: true);
        // ReloadInput
        m_ReloadInput = asset.FindActionMap("ReloadInput", throwIfNotFound: true);
        m_ReloadInput_Grab = m_ReloadInput.FindAction("Grab", throwIfNotFound: true);
        m_ReloadInput_MoveHand = m_ReloadInput.FindAction("MoveHand", throwIfNotFound: true);
        m_ReloadInput_ExitReload = m_ReloadInput.FindAction("ExitReload", throwIfNotFound: true);
        m_ReloadInput_OpenGameMenu = m_ReloadInput.FindAction("OpenGameMenu", throwIfNotFound: true);
        // InteractionInput
        m_InteractionInput = asset.FindActionMap("InteractionInput", throwIfNotFound: true);
        m_InteractionInput_Continue = m_InteractionInput.FindAction("Continue", throwIfNotFound: true);
        // GameMenuInput
        m_GameMenuInput = asset.FindActionMap("GameMenuInput", throwIfNotFound: true);
        m_GameMenuInput_Continue = m_GameMenuInput.FindAction("Continue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // IsometricInput
    private readonly InputActionMap m_IsometricInput;
    private List<IIsometricInputActions> m_IsometricInputActionsCallbackInterfaces = new List<IIsometricInputActions>();
    private readonly InputAction m_IsometricInput_Move;
    private readonly InputAction m_IsometricInput_Reload;
    private readonly InputAction m_IsometricInput_LookAt;
    private readonly InputAction m_IsometricInput_Rotation;
    private readonly InputAction m_IsometricInput_Run;
    private readonly InputAction m_IsometricInput_Interact;
    private readonly InputAction m_IsometricInput_OpenGameMenu;
    public struct IsometricInputActions
    {
        private @Inputs m_Wrapper;
        public IsometricInputActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_IsometricInput_Move;
        public InputAction @Reload => m_Wrapper.m_IsometricInput_Reload;
        public InputAction @LookAt => m_Wrapper.m_IsometricInput_LookAt;
        public InputAction @Rotation => m_Wrapper.m_IsometricInput_Rotation;
        public InputAction @Run => m_Wrapper.m_IsometricInput_Run;
        public InputAction @Interact => m_Wrapper.m_IsometricInput_Interact;
        public InputAction @OpenGameMenu => m_Wrapper.m_IsometricInput_OpenGameMenu;
        public InputActionMap Get() { return m_Wrapper.m_IsometricInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IsometricInputActions set) { return set.Get(); }
        public void AddCallbacks(IIsometricInputActions instance)
        {
            if (instance == null || m_Wrapper.m_IsometricInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IsometricInputActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @LookAt.started += instance.OnLookAt;
            @LookAt.performed += instance.OnLookAt;
            @LookAt.canceled += instance.OnLookAt;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @OpenGameMenu.started += instance.OnOpenGameMenu;
            @OpenGameMenu.performed += instance.OnOpenGameMenu;
            @OpenGameMenu.canceled += instance.OnOpenGameMenu;
        }

        private void UnregisterCallbacks(IIsometricInputActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @LookAt.started -= instance.OnLookAt;
            @LookAt.performed -= instance.OnLookAt;
            @LookAt.canceled -= instance.OnLookAt;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @OpenGameMenu.started -= instance.OnOpenGameMenu;
            @OpenGameMenu.performed -= instance.OnOpenGameMenu;
            @OpenGameMenu.canceled -= instance.OnOpenGameMenu;
        }

        public void RemoveCallbacks(IIsometricInputActions instance)
        {
            if (m_Wrapper.m_IsometricInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIsometricInputActions instance)
        {
            foreach (var item in m_Wrapper.m_IsometricInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IsometricInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IsometricInputActions @IsometricInput => new IsometricInputActions(this);

    // FirstPersonInput
    private readonly InputActionMap m_FirstPersonInput;
    private List<IFirstPersonInputActions> m_FirstPersonInputActionsCallbackInterfaces = new List<IFirstPersonInputActions>();
    private readonly InputAction m_FirstPersonInput_Fire;
    private readonly InputAction m_FirstPersonInput_LookAt;
    private readonly InputAction m_FirstPersonInput_Look;
    private readonly InputAction m_FirstPersonInput_OpenGameMenu;
    public struct FirstPersonInputActions
    {
        private @Inputs m_Wrapper;
        public FirstPersonInputActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_FirstPersonInput_Fire;
        public InputAction @LookAt => m_Wrapper.m_FirstPersonInput_LookAt;
        public InputAction @Look => m_Wrapper.m_FirstPersonInput_Look;
        public InputAction @OpenGameMenu => m_Wrapper.m_FirstPersonInput_OpenGameMenu;
        public InputActionMap Get() { return m_Wrapper.m_FirstPersonInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPersonInputActions set) { return set.Get(); }
        public void AddCallbacks(IFirstPersonInputActions instance)
        {
            if (instance == null || m_Wrapper.m_FirstPersonInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FirstPersonInputActionsCallbackInterfaces.Add(instance);
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @LookAt.started += instance.OnLookAt;
            @LookAt.performed += instance.OnLookAt;
            @LookAt.canceled += instance.OnLookAt;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @OpenGameMenu.started += instance.OnOpenGameMenu;
            @OpenGameMenu.performed += instance.OnOpenGameMenu;
            @OpenGameMenu.canceled += instance.OnOpenGameMenu;
        }

        private void UnregisterCallbacks(IFirstPersonInputActions instance)
        {
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @LookAt.started -= instance.OnLookAt;
            @LookAt.performed -= instance.OnLookAt;
            @LookAt.canceled -= instance.OnLookAt;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @OpenGameMenu.started -= instance.OnOpenGameMenu;
            @OpenGameMenu.performed -= instance.OnOpenGameMenu;
            @OpenGameMenu.canceled -= instance.OnOpenGameMenu;
        }

        public void RemoveCallbacks(IFirstPersonInputActions instance)
        {
            if (m_Wrapper.m_FirstPersonInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFirstPersonInputActions instance)
        {
            foreach (var item in m_Wrapper.m_FirstPersonInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FirstPersonInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FirstPersonInputActions @FirstPersonInput => new FirstPersonInputActions(this);

    // ReloadInput
    private readonly InputActionMap m_ReloadInput;
    private List<IReloadInputActions> m_ReloadInputActionsCallbackInterfaces = new List<IReloadInputActions>();
    private readonly InputAction m_ReloadInput_Grab;
    private readonly InputAction m_ReloadInput_MoveHand;
    private readonly InputAction m_ReloadInput_ExitReload;
    private readonly InputAction m_ReloadInput_OpenGameMenu;
    public struct ReloadInputActions
    {
        private @Inputs m_Wrapper;
        public ReloadInputActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_ReloadInput_Grab;
        public InputAction @MoveHand => m_Wrapper.m_ReloadInput_MoveHand;
        public InputAction @ExitReload => m_Wrapper.m_ReloadInput_ExitReload;
        public InputAction @OpenGameMenu => m_Wrapper.m_ReloadInput_OpenGameMenu;
        public InputActionMap Get() { return m_Wrapper.m_ReloadInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ReloadInputActions set) { return set.Get(); }
        public void AddCallbacks(IReloadInputActions instance)
        {
            if (instance == null || m_Wrapper.m_ReloadInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ReloadInputActionsCallbackInterfaces.Add(instance);
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @MoveHand.started += instance.OnMoveHand;
            @MoveHand.performed += instance.OnMoveHand;
            @MoveHand.canceled += instance.OnMoveHand;
            @ExitReload.started += instance.OnExitReload;
            @ExitReload.performed += instance.OnExitReload;
            @ExitReload.canceled += instance.OnExitReload;
            @OpenGameMenu.started += instance.OnOpenGameMenu;
            @OpenGameMenu.performed += instance.OnOpenGameMenu;
            @OpenGameMenu.canceled += instance.OnOpenGameMenu;
        }

        private void UnregisterCallbacks(IReloadInputActions instance)
        {
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @MoveHand.started -= instance.OnMoveHand;
            @MoveHand.performed -= instance.OnMoveHand;
            @MoveHand.canceled -= instance.OnMoveHand;
            @ExitReload.started -= instance.OnExitReload;
            @ExitReload.performed -= instance.OnExitReload;
            @ExitReload.canceled -= instance.OnExitReload;
            @OpenGameMenu.started -= instance.OnOpenGameMenu;
            @OpenGameMenu.performed -= instance.OnOpenGameMenu;
            @OpenGameMenu.canceled -= instance.OnOpenGameMenu;
        }

        public void RemoveCallbacks(IReloadInputActions instance)
        {
            if (m_Wrapper.m_ReloadInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IReloadInputActions instance)
        {
            foreach (var item in m_Wrapper.m_ReloadInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ReloadInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ReloadInputActions @ReloadInput => new ReloadInputActions(this);

    // InteractionInput
    private readonly InputActionMap m_InteractionInput;
    private List<IInteractionInputActions> m_InteractionInputActionsCallbackInterfaces = new List<IInteractionInputActions>();
    private readonly InputAction m_InteractionInput_Continue;
    public struct InteractionInputActions
    {
        private @Inputs m_Wrapper;
        public InteractionInputActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_InteractionInput_Continue;
        public InputActionMap Get() { return m_Wrapper.m_InteractionInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionInputActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionInputActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        private void UnregisterCallbacks(IInteractionInputActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        public void RemoveCallbacks(IInteractionInputActions instance)
        {
            if (m_Wrapper.m_InteractionInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionInputActions @InteractionInput => new InteractionInputActions(this);

    // GameMenuInput
    private readonly InputActionMap m_GameMenuInput;
    private List<IGameMenuInputActions> m_GameMenuInputActionsCallbackInterfaces = new List<IGameMenuInputActions>();
    private readonly InputAction m_GameMenuInput_Continue;
    public struct GameMenuInputActions
    {
        private @Inputs m_Wrapper;
        public GameMenuInputActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_GameMenuInput_Continue;
        public InputActionMap Get() { return m_Wrapper.m_GameMenuInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameMenuInputActions set) { return set.Get(); }
        public void AddCallbacks(IGameMenuInputActions instance)
        {
            if (instance == null || m_Wrapper.m_GameMenuInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameMenuInputActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        private void UnregisterCallbacks(IGameMenuInputActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        public void RemoveCallbacks(IGameMenuInputActions instance)
        {
            if (m_Wrapper.m_GameMenuInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameMenuInputActions instance)
        {
            foreach (var item in m_Wrapper.m_GameMenuInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameMenuInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameMenuInputActions @GameMenuInput => new GameMenuInputActions(this);
    public interface IIsometricInputActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnLookAt(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnOpenGameMenu(InputAction.CallbackContext context);
    }
    public interface IFirstPersonInputActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnLookAt(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnOpenGameMenu(InputAction.CallbackContext context);
    }
    public interface IReloadInputActions
    {
        void OnGrab(InputAction.CallbackContext context);
        void OnMoveHand(InputAction.CallbackContext context);
        void OnExitReload(InputAction.CallbackContext context);
        void OnOpenGameMenu(InputAction.CallbackContext context);
    }
    public interface IInteractionInputActions
    {
        void OnContinue(InputAction.CallbackContext context);
    }
    public interface IGameMenuInputActions
    {
        void OnContinue(InputAction.CallbackContext context);
    }
}
